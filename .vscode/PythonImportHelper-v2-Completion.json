[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "examples.datahandlers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "examples.datahandlers",
        "description": "examples.datahandlers",
        "detail": "examples.datahandlers",
        "documentation": {}
    },
    {
        "label": "keras",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keras",
        "description": "keras",
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "backend",
        "importPath": "keras",
        "description": "keras",
        "isExtraImport": true,
        "detail": "keras",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Reshape",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "MaxPooling2D",
        "importPath": "keras.layers",
        "description": "keras.layers",
        "isExtraImport": true,
        "detail": "keras.layers",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "keras.models",
        "description": "keras.models",
        "isExtraImport": true,
        "detail": "keras.models",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "torch",
        "description": "torch",
        "isExtraImport": true,
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "SGDClassifier",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "tensorflow.keras",
        "description": "tensorflow.keras",
        "isExtraImport": true,
        "detail": "tensorflow.keras",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Reshape",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Conv2D",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Flatten",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Doc2Vec",
        "importPath": "gensim.models.doc2vec",
        "description": "gensim.models.doc2vec",
        "isExtraImport": true,
        "detail": "gensim.models.doc2vec",
        "documentation": {}
    },
    {
        "label": "MyModel",
        "importPath": "examples.fedprox.model",
        "description": "examples.fedprox.model",
        "isExtraImport": true,
        "detail": "examples.fedprox.model",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AdultDTDataHandler",
        "importPath": "ibmfl.util.data_handlers.adult_dt_data_handler",
        "description": "ibmfl.util.data_handlers.adult_dt_data_handler",
        "isExtraImport": true,
        "detail": "ibmfl.util.data_handlers.adult_dt_data_handler",
        "documentation": {}
    },
    {
        "label": "load_adult",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_nursery",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_adult",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_airline",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_binovf",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_cifar10",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_compas",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_diabetes",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_german",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_higgs",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_leaf_femnist",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_linovf",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_mnist",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_multovf",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_nursery",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_simulated_federated_clustering",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "load_wikipedia",
        "importPath": "ibmfl.util.datasets",
        "description": "ibmfl.util.datasets",
        "isExtraImport": true,
        "detail": "ibmfl.util.datasets",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "GaussianNB",
        "importPath": "diffprivlib.models",
        "description": "diffprivlib.models",
        "isExtraImport": true,
        "detail": "diffprivlib.models",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "CONF_PATH",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "CONNECTION_TYPE_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "CONTEXT_PATH",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_CONN_TYPES",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_CONTEXT",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_EXAMPLES",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_MODELS",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "FUSION_CONFIG_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "GENERATE_CONFIG_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "MODEL_CONFIG_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "NAME_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "NEW_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "NUM_PARTIES_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "PATH_CONFIG_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "TASK_NAME_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "DATASET_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_DATASETS",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "GENERATE_DATA_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "NAME_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "NEW_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "NUM_PARTIES_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "PATH_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "PER_PARTY",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "PER_PARTY_ERR",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "STRATIFY_DESC",
        "importPath": "examples.constants",
        "description": "examples.constants",
        "isExtraImport": true,
        "detail": "examples.constants",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "pycloudmessenger.ffl.abstractions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycloudmessenger.ffl.abstractions",
        "description": "pycloudmessenger.ffl.abstractions",
        "detail": "pycloudmessenger.ffl.abstractions",
        "documentation": {}
    },
    {
        "label": "pycloudmessenger.ffl.fflapi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pycloudmessenger.ffl.fflapi",
        "description": "pycloudmessenger.ffl.fflapi",
        "detail": "pycloudmessenger.ffl.fflapi",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "select",
        "description": "select",
        "detail": "select",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "dateutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dateutil",
        "description": "dateutil",
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "TextIOWrapper",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm.auto",
        "description": "tqdm.auto",
        "isExtraImport": true,
        "detail": "tqdm.auto",
        "documentation": {}
    },
    {
        "label": "experiment_manager.ibmfl_cli_automator.postprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "experiment_manager.ibmfl_cli_automator.postprocess",
        "detail": "experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Aggregator",
        "importPath": "ibmfl.aggregator.aggregator",
        "description": "ibmfl.aggregator.aggregator",
        "isExtraImport": true,
        "detail": "ibmfl.aggregator.aggregator",
        "documentation": {}
    },
    {
        "label": "Aggregator",
        "importPath": "ibmfl.aggregator.aggregator",
        "description": "ibmfl.aggregator.aggregator",
        "isExtraImport": true,
        "detail": "ibmfl.aggregator.aggregator",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "ibmfl.aggregator.states",
        "description": "ibmfl.aggregator.states",
        "isExtraImport": true,
        "detail": "ibmfl.aggregator.states",
        "documentation": {}
    },
    {
        "label": "States",
        "importPath": "ibmfl.aggregator.states",
        "description": "ibmfl.aggregator.states",
        "isExtraImport": true,
        "detail": "ibmfl.aggregator.states",
        "documentation": {}
    },
    {
        "label": "get_config_from_file",
        "importPath": "ibmfl.util.config",
        "description": "ibmfl.util.config",
        "isExtraImport": true,
        "detail": "ibmfl.util.config",
        "documentation": {}
    },
    {
        "label": "configure_logging_from_file",
        "importPath": "ibmfl.util.config",
        "description": "ibmfl.util.config",
        "isExtraImport": true,
        "detail": "ibmfl.util.config",
        "documentation": {}
    },
    {
        "label": "get_config_from_file",
        "importPath": "ibmfl.util.config",
        "description": "ibmfl.util.config",
        "isExtraImport": true,
        "detail": "ibmfl.util.config",
        "documentation": {}
    },
    {
        "label": "Party",
        "importPath": "ibmfl.party.party",
        "description": "ibmfl.party.party",
        "isExtraImport": true,
        "detail": "ibmfl.party.party",
        "documentation": {}
    },
    {
        "label": "Party",
        "importPath": "ibmfl.party.party",
        "description": "ibmfl.party.party",
        "isExtraImport": true,
        "detail": "ibmfl.party.party",
        "documentation": {}
    },
    {
        "label": "StatusType",
        "importPath": "ibmfl.party.status_type",
        "description": "ibmfl.party.status_type",
        "isExtraImport": true,
        "detail": "ibmfl.party.status_type",
        "documentation": {}
    },
    {
        "label": "StatusType",
        "importPath": "ibmfl.party.status_type",
        "description": "ibmfl.party.status_type",
        "isExtraImport": true,
        "detail": "ibmfl.party.status_type",
        "documentation": {}
    },
    {
        "label": "experiment_manager.ibmfl_cli_automator.run",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "experiment_manager.ibmfl_cli_automator.run",
        "description": "experiment_manager.ibmfl_cli_automator.run",
        "detail": "experiment_manager.ibmfl_cli_automator.run",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "copyfile",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "config_manager",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config_manager",
        "description": "config_manager",
        "detail": "config_manager",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "IPython.display",
        "description": "IPython.display",
        "isExtraImport": true,
        "detail": "IPython.display",
        "documentation": {}
    },
    {
        "label": "HTML",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Dropdown",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "HBox",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "IntSlider",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Layout",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Output",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "RadioButtons",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "Textarea",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "VBox",
        "importPath": "ipywidgets",
        "description": "ipywidgets",
        "isExtraImport": true,
        "detail": "ipywidgets",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "stage_trial_files",
        "importPath": "data_copy_util",
        "description": "data_copy_util",
        "isExtraImport": true,
        "detail": "data_copy_util",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "kubernetes",
        "description": "kubernetes",
        "isExtraImport": true,
        "detail": "kubernetes",
        "documentation": {}
    },
    {
        "label": "watch",
        "importPath": "kubernetes",
        "description": "kubernetes",
        "isExtraImport": true,
        "detail": "kubernetes",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "kubernetes",
        "description": "kubernetes",
        "isExtraImport": true,
        "detail": "kubernetes",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "kubernetes",
        "description": "kubernetes",
        "isExtraImport": true,
        "detail": "kubernetes",
        "documentation": {}
    },
    {
        "label": "watch",
        "importPath": "kubernetes",
        "description": "kubernetes",
        "isExtraImport": true,
        "detail": "kubernetes",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "importPath": "kubernetes.client.rest",
        "description": "kubernetes.client.rest",
        "isExtraImport": true,
        "detail": "kubernetes.client.rest",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "importPath": "kubernetes.client",
        "description": "kubernetes.client",
        "isExtraImport": true,
        "detail": "kubernetes.client",
        "documentation": {}
    },
    {
        "label": "stream",
        "importPath": "kubernetes.stream",
        "description": "kubernetes.stream",
        "isExtraImport": true,
        "detail": "kubernetes.stream",
        "documentation": {}
    },
    {
        "label": "DynamicClient",
        "importPath": "openshift.dynamic",
        "description": "openshift.dynamic",
        "isExtraImport": true,
        "detail": "openshift.dynamic",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "TemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "ExperimentRunner",
        "importPath": "experiment_runner",
        "description": "experiment_runner",
        "isExtraImport": true,
        "detail": "experiment_runner",
        "documentation": {}
    },
    {
        "label": "FLSpawner",
        "importPath": "fl_spawner",
        "description": "fl_spawner",
        "isExtraImport": true,
        "detail": "fl_spawner",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.generate_configs",
        "description": "federated-learning-lib.examples.afa.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"AFAFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.afa_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"FedAvgLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedavg_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.afa.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.generate_configs",
        "description": "federated-learning-lib.examples.afa.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"FedAvgLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedavg_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\n        \"global\": {\n            \"rounds\": 3,",
        "detail": "federated-learning-lib.examples.afa.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.generate_configs",
        "description": "federated-learning-lib.examples.afa.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\n        \"global\": {\n            \"rounds\": 3,\n            \"termination_accuracy\": 0.9,\n            \"max_timeout\": 60,\n            \"slack0\": 2.0,\n            \"slack_delta\": 0.5,\n            \"alpha0\": 3,\n            \"beta0\": 3,",
        "detail": "federated-learning-lib.examples.afa.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.generate_configs",
        "description": "federated-learning-lib.examples.afa.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.afa.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.generate_configs",
        "description": "federated-learning-lib.examples.afa.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.afa.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_keras",
        "description": "federated-learning-lib.examples.afa.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)",
        "detail": "federated-learning-lib.examples.afa.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_keras",
        "description": "federated-learning-lib.examples.afa.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()",
        "detail": "federated-learning-lib.examples.afa.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_pytorch",
        "description": "federated-learning-lib.examples.afa.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.afa.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_pytorch",
        "description": "federated-learning-lib.examples.afa.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.afa.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_sklearn",
        "description": "federated-learning-lib.examples.afa.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 2}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":",
        "detail": "federated-learning-lib.examples.afa.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_sklearn",
        "description": "federated-learning-lib.examples.afa.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":\n        model.classes_ = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)",
        "detail": "federated-learning-lib.examples.afa.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_tf",
        "description": "federated-learning-lib.examples.afa.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    img_rows, img_cols = 28, 28\n    batch_size = 28\n    input_shape = (batch_size, img_rows, img_cols, 1)\n    sample_input = np.zeros(shape=input_shape)",
        "detail": "federated-learning-lib.examples.afa.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.afa.model_tf",
        "description": "federated-learning-lib.examples.afa.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    img_rows, img_cols = 28, 28\n    batch_size = 28\n    input_shape = (batch_size, img_rows, img_cols, 1)\n    sample_input = np.zeros(shape=input_shape)\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()",
        "detail": "federated-learning-lib.examples.afa.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "description": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\n        \"name\": \"ComparativeEliminationFusionHandler\",\n        \"path\": \"ibmfl.aggregator.fusion.comparative_elimination_fusion_handler\",\n    }\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "description": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"byzantine_threshold\": 1, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params",
        "detail": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "description": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"byzantine_threshold\": 1, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "description": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "description": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    # is_agg is set to False similar to gradient_agg, since agg needs initial model\n    return method(folder_configs, dataset, is_agg=False, party_id=0)",
        "detail": "federated-learning-lib.examples.comparative_elimination.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.model_keras",
        "description": "federated-learning-lib.examples.comparative_elimination.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)",
        "detail": "federated-learning-lib.examples.comparative_elimination.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.model_keras",
        "description": "federated-learning-lib.examples.comparative_elimination.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()",
        "detail": "federated-learning-lib.examples.comparative_elimination.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.model_pytorch",
        "description": "federated-learning-lib.examples.comparative_elimination.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 0.001},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.comparative_elimination.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.model_pytorch",
        "description": "federated-learning-lib.examples.comparative_elimination.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.comparative_elimination.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.model_tf",
        "description": "federated-learning-lib.examples.comparative_elimination.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.comparative_elimination.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.comparative_elimination.model_tf",
        "description": "federated-learning-lib.examples.comparative_elimination.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)",
        "detail": "federated-learning-lib.examples.comparative_elimination.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\n        \"name\": \"CoordinateMedianFusionHandler\",\n        \"path\": \"ibmfl.aggregator.fusion.coordinate_median_fusion_handler\",\n    }\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params",
        "detail": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.coordinate_median.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_keras",
        "description": "federated-learning-lib.examples.coordinate_median.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)",
        "detail": "federated-learning-lib.examples.coordinate_median.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_keras",
        "description": "federated-learning-lib.examples.coordinate_median.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()",
        "detail": "federated-learning-lib.examples.coordinate_median.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_pytorch",
        "description": "federated-learning-lib.examples.coordinate_median.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.coordinate_median.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_pytorch",
        "description": "federated-learning-lib.examples.coordinate_median.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.coordinate_median.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_sklearn",
        "description": "federated-learning-lib.examples.coordinate_median.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 2}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":",
        "detail": "federated-learning-lib.examples.coordinate_median.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_sklearn",
        "description": "federated-learning-lib.examples.coordinate_median.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":\n        model.classes_ = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)",
        "detail": "federated-learning-lib.examples.coordinate_median.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_tf",
        "description": "federated-learning-lib.examples.coordinate_median.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.coordinate_median.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median.model_tf",
        "description": "federated-learning-lib.examples.coordinate_median.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)",
        "detail": "federated-learning-lib.examples.coordinate_median.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\n        \"name\": \"CoordinateMedianFedplusFusionHandler\",\n        \"path\": \"ibmfl.aggregator.fusion.coordinate_median_fedplus_fusion_handler\",\n    }\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"CoordinateMedianFedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.coordinate_median_fedplus_local_training_handler\",",
        "detail": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"CoordinateMedianFedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.coordinate_median_fedplus_local_training_handler\",\n    }\n    local_training_handler[\"info\"] = {\"alpha\": 0.01, \"rho\": 10}\n    return local_training_handler\ndef get_hyperparams(model=\"keras\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 3, \"termination_accuracy\": 0.83, \"max_timeout\": 600, \"rho\": 10},",
        "detail": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "peekOfCode": "def get_hyperparams(model=\"keras\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 3, \"termination_accuracy\": 0.83, \"max_timeout\": 600, \"rho\": 10},\n        \"local\": {\"training\": {\"epochs\": 10, \"batch_size\": 10}, \"optimizer\": {\"lr\": 0.0003}},\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        dataset = dataset + \"_\" + model",
        "detail": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):\n    if is_agg:",
        "detail": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):\n    if is_agg:\n        return None\n    if model is None or model is \"default\":\n        model = \"tf\"\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()",
        "detail": "federated-learning-lib.examples.coordinate_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.doc2vec.generate_configs",
        "description": "federated-learning-lib.examples.doc2vec.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"Doc2VecFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.doc2vec_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"Doc2VecLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.doc2vec_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.doc2vec.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.doc2vec.generate_configs",
        "description": "federated-learning-lib.examples.doc2vec.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"Doc2VecLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.doc2vec_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\n        \"global\": {\"rounds\": 15, \"max_timeout\": 60},\n        \"local\": {",
        "detail": "federated-learning-lib.examples.doc2vec.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.doc2vec.generate_configs",
        "description": "federated-learning-lib.examples.doc2vec.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\n        \"global\": {\"rounds\": 15, \"max_timeout\": 60},\n        \"local\": {\n            \"training\": {\n                \"epochs\": 3,\n            }\n        },\n    }\n    return hyperparams",
        "detail": "federated-learning-lib.examples.doc2vec.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.doc2vec.generate_configs",
        "description": "federated-learning-lib.examples.doc2vec.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"doc2vec\"):\n    SUPPORTED_DATASETS = [\"wikipedia\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"doc2vec\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"doc2vec\"):",
        "detail": "federated-learning-lib.examples.doc2vec.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.doc2vec.generate_configs",
        "description": "federated-learning-lib.examples.doc2vec.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"doc2vec\"):\n    SUPPORTED_MODELS = [\"doc2vec\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.doc2vec.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.doc2vec.model_doc2vec",
        "description": "federated-learning-lib.examples.doc2vec.model_doc2vec",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\n        \"local\": {\n            \"training\": {\n                \"epochs\": 3,\n            }\n        }\n    }\n    return hyperparams\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):",
        "detail": "federated-learning-lib.examples.doc2vec.model_doc2vec",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.doc2vec.model_doc2vec",
        "description": "federated-learning-lib.examples.doc2vec.model_doc2vec",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    model = Doc2Vec(vector_size=50, min_count=2)\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    fname = os.path.join(folder_configs, \"gensim_doc2vec.model\")\n    with open(fname, \"wb\") as file:\n        model.save(file)\n    spec = {\"model_name\": \"doc2vec\", \"model_definition\": fname}\n    model = {\n        \"name\": \"Doc2VecFLModel\",",
        "detail": "federated-learning-lib.examples.doc2vec.model_doc2vec",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.generate_configs",
        "description": "federated-learning-lib.examples.fedavg.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"FedAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.fedavg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"FedAvgLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedavg_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.fedavg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.generate_configs",
        "description": "federated-learning-lib.examples.fedavg.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"FedAvgLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedavg_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))",
        "detail": "federated-learning-lib.examples.fedavg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.generate_configs",
        "description": "federated-learning-lib.examples.fedavg.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.fedavg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.generate_configs",
        "description": "federated-learning-lib.examples.fedavg.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.fedavg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.generate_configs",
        "description": "federated-learning-lib.examples.fedavg.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.fedavg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_keras",
        "description": "federated-learning-lib.examples.fedavg.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)",
        "detail": "federated-learning-lib.examples.fedavg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_keras",
        "description": "federated-learning-lib.examples.fedavg.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()",
        "detail": "federated-learning-lib.examples.fedavg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_pytorch",
        "description": "federated-learning-lib.examples.fedavg.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.fedavg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_pytorch",
        "description": "federated-learning-lib.examples.fedavg.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.fedavg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_sklearn",
        "description": "federated-learning-lib.examples.fedavg.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 2}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":",
        "detail": "federated-learning-lib.examples.fedavg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_sklearn",
        "description": "federated-learning-lib.examples.fedavg.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":\n        model.classes_ = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)",
        "detail": "federated-learning-lib.examples.fedavg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_tf",
        "description": "federated-learning-lib.examples.fedavg.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    img_rows, img_cols = 28, 28\n    batch_size = 28\n    input_shape = (batch_size, img_rows, img_cols, 1)\n    sample_input = np.zeros(shape=input_shape)",
        "detail": "federated-learning-lib.examples.fedavg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavg.model_tf",
        "description": "federated-learning-lib.examples.fedavg.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    img_rows, img_cols = 28, 28\n    batch_size = 28\n    input_shape = (batch_size, img_rows, img_cols, 1)\n    sample_input = np.zeros(shape=input_shape)\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()",
        "detail": "federated-learning-lib.examples.fedavg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "description": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"FedAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.fedavg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"FedAvgFedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedavg_fedplus_local_training_handler\",\n    }\n    local_training_handler[\"info\"] = {\"alpha\": 0.01, \"rho\": 1000}\n    return local_training_handler",
        "detail": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "description": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"FedAvgFedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedavg_fedplus_local_training_handler\",\n    }\n    local_training_handler[\"info\"] = {\"alpha\": 0.01, \"rho\": 1000}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.83, \"max_timeout\": 600, \"rho\": 1000}}\n    current_module = globals().get(\"__package__\")",
        "detail": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "description": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.83, \"max_timeout\": 600, \"rho\": 1000}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\", \"cifar10\"]",
        "detail": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "description": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\", \"cifar10\"]\n    if dataset in SUPPORTED_DATASETS:\n        dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):\n    SUPPORTED_MODELS = [\"pytorch\", \"tf\"]",
        "detail": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "description": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):\n    SUPPORTED_MODELS = [\"pytorch\", \"tf\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.fedavgplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.model_pytorch",
        "description": "federated-learning-lib.examples.fedavgplus.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 10, \"lr\": 0.001, \"batch_size\": 32},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(3, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.fedavgplus.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.model_pytorch",
        "description": "federated-learning-lib.examples.fedavgplus.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(3, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.fedavgplus.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.model_tf",
        "description": "federated-learning-lib.examples.fedavgplus.model_tf",
        "peekOfCode": "def get_hyperparams(model=\"keras\"):\n    hyperparams = {\"training\": {\"epochs\": 10, \"batch_size\": 10}, \"optimizer\": {\"lr\": 0.0003}}\n    return hyperparams\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.fedavgplus.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedavgplus.model_tf",
        "description": "federated-learning-lib.examples.fedavgplus.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)",
        "detail": "federated-learning-lib.examples.fedavgplus.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedplus.generate_configs",
        "description": "federated-learning-lib.examples.fedplus.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"IterAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.iter_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config():\n    local_training_handler = {\n        \"name\": \"FedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedplus_local_training_handler\",\n    }\n    local_training_handler[\"info\"] = {\"alpha\": 0.1}\n    return local_training_handler",
        "detail": "federated-learning-lib.examples.fedplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedplus.generate_configs",
        "description": "federated-learning-lib.examples.fedplus.generate_configs",
        "peekOfCode": "def get_local_training_config():\n    local_training_handler = {\n        \"name\": \"FedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.fedplus_local_training_handler\",\n    }\n    local_training_handler[\"info\"] = {\"alpha\": 0.1}\n    return local_training_handler\ndef get_hyperparams(model=\"keras\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 2000, \"termination_accuracy\": 0.83, \"max_timeout\": 600},",
        "detail": "federated-learning-lib.examples.fedplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedplus.generate_configs",
        "description": "federated-learning-lib.examples.fedplus.generate_configs",
        "peekOfCode": "def get_hyperparams(model=\"keras\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 2000, \"termination_accuracy\": 0.83, \"max_timeout\": 600},\n        \"local\": {\"training\": {\"epochs\": 10, \"batch_size\": 10}, \"optimizer\": {\"lr\": 0.0003}},\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"femnist\"]\n    if dataset in SUPPORTED_DATASETS:\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)",
        "detail": "federated-learning-lib.examples.fedplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedplus.generate_configs",
        "description": "federated-learning-lib.examples.fedplus.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"femnist\"]\n    if dataset in SUPPORTED_DATASETS:\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    if is_agg:\n        return None",
        "detail": "federated-learning-lib.examples.fedplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedplus.generate_configs",
        "description": "federated-learning-lib.examples.fedplus.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    if is_agg:\n        return None\n    if model is None or model is \"default\":\n        model = \"keras\"\n    num_classes = 62\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:",
        "detail": "federated-learning-lib.examples.fedplus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedprox.generate_configs",
        "description": "federated-learning-lib.examples.fedprox.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"IterAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.iter_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=\"tf\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 10, \"termination_accuracy\": 0.9, \"max_timeout\": 60},\n        \"local\": {\"training\": {\"epochs\": 3}},",
        "detail": "federated-learning-lib.examples.fedprox.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedprox.generate_configs",
        "description": "federated-learning-lib.examples.fedprox.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=\"tf\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 10, \"termination_accuracy\": 0.9, \"max_timeout\": 60},\n        \"local\": {\"training\": {\"epochs\": 3}},\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):",
        "detail": "federated-learning-lib.examples.fedprox.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedprox.generate_configs",
        "description": "federated-learning-lib.examples.fedprox.generate_configs",
        "peekOfCode": "def get_hyperparams(model=\"tf\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 10, \"termination_accuracy\": 0.9, \"max_timeout\": 60},\n        \"local\": {\"training\": {\"epochs\": 3}},\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"mnist\":",
        "detail": "federated-learning-lib.examples.fedprox.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedprox.generate_configs",
        "description": "federated-learning-lib.examples.fedprox.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"mnist\":\n            dataset = \"mnist_tf\"\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):",
        "detail": "federated-learning-lib.examples.fedprox.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fedprox.generate_configs",
        "description": "federated-learning-lib.examples.fedprox.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):\n    if is_agg:\n        return None\n    if model is None or model is \"default\":\n        model = \"tf\"\n    # Create an instance of the model\n    model = MyModel()\n    # save model to json\n    config = model.to_json()\n    if not os.path.exists(folder_configs):",
        "detail": "federated-learning-lib.examples.fedprox.generate_configs",
        "documentation": {}
    },
    {
        "label": "MyModel",
        "kind": 6,
        "importPath": "federated-learning-lib.examples.fedprox.model",
        "description": "federated-learning-lib.examples.fedprox.model",
        "peekOfCode": "class MyModel(Model):\n    def __init__(self):\n        super(MyModel, self).__init__()\n        self.conv1 = Conv2D(32, 3, activation=\"relu\")\n        self.flatten = Flatten()\n        self.d1 = Dense(128, activation=\"relu\")\n        self.d2 = Dense(10)\n    def call(self, x):\n        x = self.conv1(x)\n        x = self.flatten(x)",
        "detail": "federated-learning-lib.examples.fedprox.model",
        "documentation": {}
    },
    {
        "label": "create_crypto_keys",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "def create_crypto_keys(config_path):\n    global crypto_keys_dir\n    if config_path is not None:\n        crypto_keys_dir = os.path.join(config_path, \"keys\")\n    if not os.path.exists(crypto_keys_dir):\n        os.makedirs(crypto_keys_dir)\n    # Path for public key context file\n    ctx_file = os.path.join(crypto_keys_dir, \"fhe.context\")\n    # Path for secret key context file\n    key_file = os.path.join(crypto_keys_dir, \"fhe.key\")",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\n        \"name\": \"CryptoIterAvgFusionHandler\",\n        \"path\": \"ibmfl.aggregator.fusion.crypto_iter_avg_fusion_handler\",\n        \"info\": {\"crypto\": get_crypto_config(isParty=False)},\n    }\n    return fusion\ndef get_local_training_config(configs_folder):\n    local_training_handler = {\n        \"name\": \"CryptoLocalTrainingHandler\",",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder):\n    local_training_handler = {\n        \"name\": \"CryptoLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.crypto_local_training_handler\",\n        \"info\": {\"crypto\": get_crypto_config(isParty=True)},\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\n        \"global\": {",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\n        \"global\": {\n            \"rounds\": 3,\n        }\n    }\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"tf\", \"pytorch\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)\ndef get_crypto_config(isParty):\n    # Path for public key context file",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_crypto_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "def get_crypto_config(isParty):\n    # Path for public key context file\n    ctx_file = os.path.join(crypto_keys_dir, \"fhe.context\")\n    # Path for secret key context file\n    key_file = os.path.join(crypto_keys_dir, \"fhe.key\")\n    if not isParty:\n        crypto = {\n            \"name\": \"CryptoFHE\",\n            \"path\": \"ibmfl.crypto.helayer.fhe\",\n            \"key_manager\": {",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "crypto_keys_dir",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "peekOfCode": "crypto_keys_dir = \"examples/keys\"\ndef create_crypto_keys(config_path):\n    global crypto_keys_dir\n    if config_path is not None:\n        crypto_keys_dir = os.path.join(config_path, \"keys\")\n    if not os.path.exists(crypto_keys_dir):\n        os.makedirs(crypto_keys_dir)\n    # Path for public key context file\n    ctx_file = os.path.join(crypto_keys_dir, \"fhe.context\")\n    # Path for secret key context file",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)\n    elif dataset == \"femnist\":\n        return get_femnist_model_config(folder_configs)\n    elif dataset == \"custom_dataset\":",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_mnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "peekOfCode": "def get_mnist_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation=\"relu\"))",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_cifar10_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "peekOfCode": "def get_cifar10_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 32, 32\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (3, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 3)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_femnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "peekOfCode": "def get_femnist_model_config(folder_configs):\n    num_classes = 62\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(5, 5), activation=\"relu\", padding=\"same\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_pytorch",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_pytorch",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_sklearn",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 2}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_sklearn",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":\n        model.classes_ = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_hyperparams = {\"training\": {\"epochs\": 2}}\n    return local_hyperparams\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    model = define_mnist_model_via_tf_keras()\n    model.save(folder_configs)",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    model = define_mnist_model_via_tf_keras()\n    model.save(folder_configs)\n    spec = {\"model_name\": \"tf-cnn\", \"model_definition\": folder_configs}\n    return {\"name\": \"TensorFlowFLModel\", \"path\": \"ibmfl.model.tensorflow_fl_model\", \"spec\": spec}\ndef define_mnist_model_via_tf_keras():",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "documentation": {}
    },
    {
        "label": "define_mnist_model_via_tf_keras",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "description": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "peekOfCode": "def define_mnist_model_via_tf_keras():\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    class MnistCnnModel(tf.keras.Model):\n        def __init__(self):\n            super(MnistCnnModel, self).__init__()\n            self.conv1 = tf.keras.layers.Conv2D(32, 3, activation=\"relu\")\n            self.flatten = tf.keras.layers.Flatten()\n            self.d1 = tf.keras.layers.Dense(128, activation=\"relu\")\n            self.d2 = tf.keras.layers.Dense(num_classes)",
        "detail": "federated-learning-lib.examples.fhe_iter_avg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\n        \"name\": \"GeometricMedianFedplusFusionHandler\",\n        \"path\": \"ibmfl.aggregator.fusion.geometric_median_fedplus_fusion_handler\",\n    }\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"GeometricMedianFedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.geometric_median_fedplus_local_training_handler\",",
        "detail": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"GeometricMedianFedPlusLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.geometric_median_fedplus_local_training_handler\",\n    }\n    local_training_handler[\"info\"] = {\"alpha\": 0.01, \"rho\": 10}\n    return local_training_handler\ndef get_hyperparams(model=\"keras\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 3, \"termination_accuracy\": 0.83, \"max_timeout\": 600, \"rho\": 10},",
        "detail": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "peekOfCode": "def get_hyperparams(model=\"keras\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 3, \"termination_accuracy\": 0.83, \"max_timeout\": 600, \"rho\": 10},\n        \"local\": {\"training\": {\"epochs\": 10, \"batch_size\": 10}, \"optimizer\": {\"lr\": 0.0003}},\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        dataset = dataset + \"_\" + model",
        "detail": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"tf\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):\n    if is_agg:",
        "detail": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "description": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"tf\"):\n    if is_agg:\n        return None\n    if model is None or model is \"default\":\n        model = \"tf\"\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()",
        "detail": "federated-learning-lib.examples.geometric_median_plus.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "description": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"GradientFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.gradient_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"GradientLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.gradient_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "description": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"GradientLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.gradient_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))",
        "detail": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "description": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "description": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "description": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=False, party_id=0)",
        "detail": "federated-learning-lib.examples.gradient_aggregation.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.model_keras",
        "description": "federated-learning-lib.examples.gradient_aggregation.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)",
        "detail": "federated-learning-lib.examples.gradient_aggregation.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.model_keras",
        "description": "federated-learning-lib.examples.gradient_aggregation.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation=\"relu\"))",
        "detail": "federated-learning-lib.examples.gradient_aggregation.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.model_pytorch",
        "description": "federated-learning-lib.examples.gradient_aggregation.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),",
        "detail": "federated-learning-lib.examples.gradient_aggregation.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.model_pytorch",
        "description": "federated-learning-lib.examples.gradient_aggregation.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),\n        nn.Flatten(),\n        nn.Linear(9216, 128),",
        "detail": "federated-learning-lib.examples.gradient_aggregation.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.model_tf",
        "description": "federated-learning-lib.examples.gradient_aggregation.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.gradient_aggregation.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.gradient_aggregation.model_tf",
        "description": "federated-learning-lib.examples.gradient_aggregation.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)\n        def call(self, x):\n            x = self.conv1(x)",
        "detail": "federated-learning-lib.examples.gradient_aggregation.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.id3_dt.generate_configs",
        "description": "federated-learning-lib.examples.id3_dt.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"ID3FusionHandler\", \"path\": \"ibmfl.aggregator.fusion.dt_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=None):\n    hyperparams = {\n        \"global\": {\n            \"max_depth\": 3,",
        "detail": "federated-learning-lib.examples.id3_dt.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.id3_dt.generate_configs",
        "description": "federated-learning-lib.examples.id3_dt.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=None):\n    hyperparams = {\n        \"global\": {\n            \"max_depth\": 3,\n        }\n    }\n    return hyperparams",
        "detail": "federated-learning-lib.examples.id3_dt.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.id3_dt.generate_configs",
        "description": "federated-learning-lib.examples.id3_dt.generate_configs",
        "peekOfCode": "def get_hyperparams(model=None):\n    hyperparams = {\n        \"global\": {\n            \"max_depth\": 3,\n        }\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=None):\n    SUPPORTED_DATASETS = [\"adult\", \"nursery\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:",
        "detail": "federated-learning-lib.examples.id3_dt.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.id3_dt.generate_configs",
        "description": "federated-learning-lib.examples.id3_dt.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=None):\n    SUPPORTED_DATASETS = [\"adult\", \"nursery\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=None):\n    if dataset == \"adult\":\n        loaded_data = load_adult()",
        "detail": "federated-learning-lib.examples.id3_dt.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.id3_dt.generate_configs",
        "description": "federated-learning-lib.examples.id3_dt.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=None):\n    if dataset == \"adult\":\n        loaded_data = load_adult()\n        # preproces the dataset first before generating the model spec\n        dh = AdultDTDataHandler()\n        loaded_data = dh.preprocess(loaded_data)\n    elif dataset == \"nursery\":\n        loaded_data = load_nursery()\n    spec = dict()\n    spec[\"list_of_features\"] = list(range(loaded_data.shape[1] - 1))",
        "detail": "federated-learning-lib.examples.id3_dt.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.iter_avg.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"IterAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.iter_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))",
        "detail": "federated-learning-lib.examples.iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.iter_avg.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params",
        "detail": "federated-learning-lib.examples.iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.iter_avg.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.iter_avg.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.iter_avg.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_keras",
        "description": "federated-learning-lib.examples.iter_avg.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)",
        "detail": "federated-learning-lib.examples.iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_keras",
        "description": "federated-learning-lib.examples.iter_avg.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)\n    elif dataset == \"femnist\":\n        return get_femnist_model_config(folder_configs)\n    elif dataset == \"custom_dataset\":",
        "detail": "federated-learning-lib.examples.iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_mnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_keras",
        "description": "federated-learning-lib.examples.iter_avg.model_keras",
        "peekOfCode": "def get_mnist_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation=\"relu\"))",
        "detail": "federated-learning-lib.examples.iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_cifar10_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_keras",
        "description": "federated-learning-lib.examples.iter_avg.model_keras",
        "peekOfCode": "def get_cifar10_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 32, 32\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (3, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 3)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))",
        "detail": "federated-learning-lib.examples.iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_femnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_keras",
        "description": "federated-learning-lib.examples.iter_avg.model_keras",
        "peekOfCode": "def get_femnist_model_config(folder_configs):\n    num_classes = 62\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(5, 5), activation=\"relu\", padding=\"same\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))",
        "detail": "federated-learning-lib.examples.iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_pytorch",
        "description": "federated-learning-lib.examples.iter_avg.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.iter_avg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_pytorch",
        "description": "federated-learning-lib.examples.iter_avg.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.iter_avg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_sklearn",
        "description": "federated-learning-lib.examples.iter_avg.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 2}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":",
        "detail": "federated-learning-lib.examples.iter_avg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_sklearn",
        "description": "federated-learning-lib.examples.iter_avg.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":\n        model.classes_ = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)",
        "detail": "federated-learning-lib.examples.iter_avg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_tf",
        "description": "federated-learning-lib.examples.iter_avg.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.iter_avg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.iter_avg.model_tf",
        "description": "federated-learning-lib.examples.iter_avg.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)",
        "detail": "federated-learning-lib.examples.iter_avg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.generate_configs",
        "description": "federated-learning-lib.examples.krum.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"KrumFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.krum_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"byzantine_threshold\": 1, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))",
        "detail": "federated-learning-lib.examples.krum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.generate_configs",
        "description": "federated-learning-lib.examples.krum.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"byzantine_threshold\": 1, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params",
        "detail": "federated-learning-lib.examples.krum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.generate_configs",
        "description": "federated-learning-lib.examples.krum.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"byzantine_threshold\": 1, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.krum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.generate_configs",
        "description": "federated-learning-lib.examples.krum.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.krum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.generate_configs",
        "description": "federated-learning-lib.examples.krum.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.krum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.model_keras",
        "description": "federated-learning-lib.examples.krum.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)",
        "detail": "federated-learning-lib.examples.krum.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.model_keras",
        "description": "federated-learning-lib.examples.krum.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()",
        "detail": "federated-learning-lib.examples.krum.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.model_pytorch",
        "description": "federated-learning-lib.examples.krum.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.krum.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.model_pytorch",
        "description": "federated-learning-lib.examples.krum.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.krum.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.model_tf",
        "description": "federated-learning-lib.examples.krum.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.krum.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.krum.model_tf",
        "description": "federated-learning-lib.examples.krum.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)",
        "detail": "federated-learning-lib.examples.krum.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "description": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"NaiveBayesFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.naive_bayes_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=None):\n    hyperparams = {\"global\": {}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):",
        "detail": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "description": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=None):\n    hyperparams = {\"global\": {}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"adult\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":",
        "detail": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "description": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "peekOfCode": "def get_hyperparams(model=None):\n    hyperparams = {\"global\": {}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"adult\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_sklearn\"\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:",
        "detail": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "description": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"adult\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_sklearn\"\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"sklearn\"):",
        "detail": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "description": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"sklearn\"):\n    if is_agg:\n        return None\n    model = GaussianNB(epsilon=1, bounds=([0] * 18, [1] * 18))\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    fname = os.path.join(folder_configs, \"model_architecture.pickle\")\n    with open(fname, \"wb\") as f:\n        pickle.dump(model, f)\n    # Generate model spec:",
        "detail": "federated-learning-lib.examples.naive_bayes_dp.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.generate_configs",
        "description": "federated-learning-lib.examples.pfnm.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"PFNMFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.pfnm_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"PFNMLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.pfnm_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.pfnm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.generate_configs",
        "description": "federated-learning-lib.examples.pfnm.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"PFNMLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.pfnm_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))",
        "detail": "federated-learning-lib.examples.pfnm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.generate_configs",
        "description": "federated-learning-lib.examples.pfnm.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.pfnm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.generate_configs",
        "description": "federated-learning-lib.examples.pfnm.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.pfnm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.generate_configs",
        "description": "federated-learning-lib.examples.pfnm.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.pfnm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.model_keras",
        "description": "federated-learning-lib.examples.pfnm.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)",
        "detail": "federated-learning-lib.examples.pfnm.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.model_keras",
        "description": "federated-learning-lib.examples.pfnm.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()",
        "detail": "federated-learning-lib.examples.pfnm.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.model_pytorch",
        "description": "federated-learning-lib.examples.pfnm.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Flatten(1, -1),",
        "detail": "federated-learning-lib.examples.pfnm.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.model_pytorch",
        "description": "federated-learning-lib.examples.pfnm.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Flatten(1, -1),\n        nn.Linear(784, 256),\n        nn.ReLU(),\n        nn.Linear(256, 100),\n        nn.ReLU(),\n        nn.Linear(100, 50),",
        "detail": "federated-learning-lib.examples.pfnm.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.model_tf",
        "description": "federated-learning-lib.examples.pfnm.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    import copy\n    import tensorflow as tf\n    from tensorflow import keras\n    from tensorflow.keras.layers import Conv2D, Dense, Dropout, Flatten, Reshape\n    num_classes = 10\n    img_rows, img_cols = 28, 28",
        "detail": "federated-learning-lib.examples.pfnm.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pfnm.model_tf",
        "description": "federated-learning-lib.examples.pfnm.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    import copy\n    import tensorflow as tf\n    from tensorflow import keras\n    from tensorflow.keras.layers import Conv2D, Dense, Dropout, Flatten, Reshape\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    input_shape = (img_rows, img_cols, 1)\n    model = tf.keras.Sequential()\n    model.add(Reshape((784,), input_shape=input_shape))",
        "detail": "federated-learning-lib.examples.pfnm.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.prej_remover.generate_configs",
        "description": "federated-learning-lib.examples.prej_remover.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"PrejudiceRemoverFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.prej_remover_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"PRLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.pr_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.prej_remover.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.prej_remover.generate_configs",
        "description": "federated-learning-lib.examples.prej_remover.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"PRLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.pr_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9}, \"local\": {\"training\": {\"max_iter\": 2}}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"None\"):",
        "detail": "federated-learning-lib.examples.prej_remover.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.prej_remover.generate_configs",
        "description": "federated-learning-lib.examples.prej_remover.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9}, \"local\": {\"training\": {\"max_iter\": 2}}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"None\"):\n    SUPPORTED_DATASETS = [\"adult\", \"compas\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_pr\"\n        elif dataset == \"compas\":\n            dataset = \"compas_pr\"",
        "detail": "federated-learning-lib.examples.prej_remover.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.prej_remover.generate_configs",
        "description": "federated-learning-lib.examples.prej_remover.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"None\"):\n    SUPPORTED_DATASETS = [\"adult\", \"compas\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_pr\"\n        elif dataset == \"compas\":\n            dataset = \"compas_pr\"\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))",
        "detail": "federated-learning-lib.examples.prej_remover.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.prej_remover.generate_configs",
        "description": "federated-learning-lib.examples.prej_remover.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"None\"):\n    if is_agg:\n        return None\n    # Generate model spec:\n    spec = {\"eta\": 1, \"C\": 0.0001}\n    model = {\"name\": \"PrejRemoverFLModel\", \"path\": \"ibmfl.model.prej_remover_fl_model\", \"spec\": spec}\n    return model",
        "detail": "federated-learning-lib.examples.prej_remover.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "description": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"RLFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.rl_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"RLLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.rl_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model=\"default\"):",
        "detail": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "description": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"RLLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.rl_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model=\"default\"):\n    hyperparams = {\"global\": {\"rounds\": 1}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"default\"):",
        "detail": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "description": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "peekOfCode": "def get_hyperparams(model=\"default\"):\n    hyperparams = {\"global\": {\"rounds\": 1}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"default\"):\n    if is_agg:\n        return None\n    dataset = \"cartpole\"\n    data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"default\"):",
        "detail": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "description": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"default\"):\n    if is_agg:\n        return None\n    dataset = \"cartpole\"\n    data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"default\"):\n    if is_agg:\n        return None\n    model0 = {",
        "detail": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "description": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"default\"):\n    if is_agg:\n        return None\n    model0 = {\n        \"name\": \"RLlibFLModel\",\n        \"path\": \"ibmfl.model.rllib_fl_model\",\n        \"spec\": {\n            \"policy_definition\": \"ppo\",\n            \"policy_name\": \"cartpole-ppo\",\n            \"params\": {",
        "detail": "federated-learning-lib.examples.rl_cartpole.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "description": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"RLFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.rl_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"RLLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.rl_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "description": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"RLLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.rl_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 1}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"default\"):",
        "detail": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "description": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 1}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"default\"):\n    if is_agg:\n        return None\n    dataset = \"pendulum\"\n    data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"default\"):",
        "detail": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "description": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"default\"):\n    if is_agg:\n        return None\n    dataset = \"pendulum\"\n    data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"default\"):\n    if is_agg:\n        return None\n    model0 = {",
        "detail": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "description": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"default\"):\n    if is_agg:\n        return None\n    model0 = {\n        \"name\": \"RLlibFLModel\",\n        \"path\": \"ibmfl.model.rllib_fl_model\",\n        \"spec\": {\n            \"policy_definition\": \"DDPG\",\n            \"policy_name\": \"pendulum-ddpg\",\n            \"params\": {",
        "detail": "federated-learning-lib.examples.rl_pendulum.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"ShuffleIterAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.shuffle_iter_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    global _g_seed\n    # default seed file\n    seed_file = os.path.join(configs_folder, \"permute_secret.seed\")\n    if not _g_seed:\n        _g_seed = random.randrange(sys.maxsize)\n        with open(seed_file, \"w\") as outfile:",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    global _g_seed\n    # default seed file\n    seed_file = os.path.join(configs_folder, \"permute_secret.seed\")\n    if not _g_seed:\n        _g_seed = random.randrange(sys.maxsize)\n        with open(seed_file, \"w\") as outfile:\n            outfile.write(str(_g_seed))\n    local_training_handler = {\n        \"name\": \"ShuffleLocalTrainingHandler\",",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "_g_seed",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "peekOfCode": "_g_seed = None\ndef get_fusion_config():\n    fusion = {\"name\": \"ShuffleIterAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.shuffle_iter_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    global _g_seed\n    # default seed file\n    seed_file = os.path.join(configs_folder, \"permute_secret.seed\")\n    if not _g_seed:\n        _g_seed = random.randrange(sys.maxsize)",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)\n    elif dataset == \"femnist\":\n        return get_femnist_model_config(folder_configs)\n    else:",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_mnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "peekOfCode": "def get_mnist_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation=\"relu\"))",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_cifar10_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "peekOfCode": "def get_cifar10_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 32, 32\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (3, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 3)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_femnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "peekOfCode": "def get_femnist_model_config(folder_configs):\n    num_classes = 62\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(5, 5), activation=\"relu\", padding=\"same\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_pytorch",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_pytorch",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_sklearn",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 2}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_sklearn",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":\n        model.classes_ = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_tf",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.shuffle_iter_avg.model_tf",
        "description": "federated-learning-lib.examples.shuffle_iter_avg.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)",
        "detail": "federated-learning-lib.examples.shuffle_iter_avg.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"ReweighFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.reweigh_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"ReweighLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.reweigh_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"ReweighLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.reweigh_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9}, \"local\": {\"training\": {\"max_iter\": 2}}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9}, \"local\": {\"training\": {\"max_iter\": 2}}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"adult\", \"compas\", \"german\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_sklearn_grw\"\n        elif dataset == \"compas\":\n            dataset = \"compas_sklearn_grw\"",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"adult\", \"compas\", \"german\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_sklearn_grw\"\n        elif dataset == \"compas\":\n            dataset = \"compas_sklearn_grw\"\n        elif dataset == \"german\":\n            dataset = \"german_sklearn_grw\"\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"sklearn\"):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    fname = os.path.join(folder_configs, \"model_architecture.pickle\")\n    with open(fname, \"wb\") as f:\n        joblib.dump(model, f)\n    # Generate model spec:",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_globalrw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"IterAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.iter_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"ReweighLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.reweigh_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"ReweighLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.reweigh_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9}, \"local\": {\"training\": {\"max_iter\": 2}}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9}, \"local\": {\"training\": {\"max_iter\": 2}}}\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"adult\", \"compas\", \"german\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_sklearn\"\n        elif dataset == \"compas\":\n            dataset = \"compas_sklearn\"",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"adult\", \"compas\", \"german\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"adult\":\n            dataset = \"adult_sklearn\"\n        elif dataset == \"compas\":\n            dataset = \"compas_sklearn\"\n        elif dataset == \"german\":\n            dataset = \"german_sklearn\"\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "description": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"sklearn\"):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    fname = os.path.join(folder_configs, \"model_architecture.pickle\")\n    with open(fname, \"wb\") as f:\n        joblib.dump(model, f)\n    # Generate model spec:",
        "detail": "federated-learning-lib.examples.sklearn_logclassification_rw.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.spahm.generate_configs",
        "description": "federated-learning-lib.examples.spahm.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"SPAHMFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.spahm_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=\"sklearn\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 1, \"iters\": 50, \"optimize_hyperparams\": True},\n        \"local\": {\"training\": {\"max_iter\": 500, \"n_clusters\": 10}},",
        "detail": "federated-learning-lib.examples.spahm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.spahm.generate_configs",
        "description": "federated-learning-lib.examples.spahm.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model=\"sklearn\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 1, \"iters\": 50, \"optimize_hyperparams\": True},\n        \"local\": {\"training\": {\"max_iter\": 500, \"n_clusters\": 10}},\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):",
        "detail": "federated-learning-lib.examples.spahm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.spahm.generate_configs",
        "description": "federated-learning-lib.examples.spahm.generate_configs",
        "peekOfCode": "def get_hyperparams(model=\"sklearn\"):\n    hyperparams = {\n        \"global\": {\"rounds\": 1, \"iters\": 50, \"optimize_hyperparams\": True},\n        \"local\": {\"training\": {\"max_iter\": 500, \"n_clusters\": 10}},\n    }\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"federated-clustering\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)",
        "detail": "federated-learning-lib.examples.spahm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.spahm.generate_configs",
        "description": "federated-learning-lib.examples.spahm.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"sklearn\"):\n    SUPPORTED_DATASETS = [\"federated-clustering\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"sklearn\"):\n    SUPPORTED_MODELS = [\"sklearn\"]\n    if model not in SUPPORTED_MODELS:",
        "detail": "federated-learning-lib.examples.spahm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.spahm.generate_configs",
        "description": "federated-learning-lib.examples.spahm.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"sklearn\"):\n    SUPPORTED_MODELS = [\"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.spahm.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.spahm.model_sklearn",
        "description": "federated-learning-lib.examples.spahm.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 500, \"n_clusters\": 10}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = KMeans()\n    # Save model\n    fname = os.path.join(folder_configs, \"kmeans-central-model.pickle\")\n    with open(fname, \"wb\") as f:",
        "detail": "federated-learning-lib.examples.spahm.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.spahm.model_sklearn",
        "description": "federated-learning-lib.examples.spahm.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = KMeans()\n    # Save model\n    fname = os.path.join(folder_configs, \"kmeans-central-model.pickle\")\n    with open(fname, \"wb\") as f:\n        pickle.dump(model, f)\n    # Generate model spec:\n    spec = {\"model_name\": \"sklearn-kmeans\", \"model_definition\": fname}",
        "detail": "federated-learning-lib.examples.spahm.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.generate_configs",
        "description": "federated-learning-lib.examples.zeno.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"ZenoGradientFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.zeno_gradient_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"GradientLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.gradient_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):",
        "detail": "federated-learning-lib.examples.zeno.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.generate_configs",
        "description": "federated-learning-lib.examples.zeno.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\n        \"name\": \"GradientLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.gradient_local_training_handler\",\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))",
        "detail": "federated-learning-lib.examples.zeno.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.generate_configs",
        "description": "federated-learning-lib.examples.zeno.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.examples.zeno.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.generate_configs",
        "description": "federated-learning-lib.examples.zeno.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if dataset == \"mnist\" and model == \"tf\":\n            dataset = \"mnist_tf\"\n        if dataset == \"mnist\" and model == \"pytorch\":\n            dataset = \"mnist_pytorch\"\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))",
        "detail": "federated-learning-lib.examples.zeno.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.generate_configs",
        "description": "federated-learning-lib.examples.zeno.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg, party_id=0)",
        "detail": "federated-learning-lib.examples.zeno.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.model_keras",
        "description": "federated-learning-lib.examples.zeno.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)",
        "detail": "federated-learning-lib.examples.zeno.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.model_keras",
        "description": "federated-learning-lib.examples.zeno.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation=\"relu\"))",
        "detail": "federated-learning-lib.examples.zeno.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.model_pytorch",
        "description": "federated-learning-lib.examples.zeno.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),",
        "detail": "federated-learning-lib.examples.zeno.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.model_pytorch",
        "description": "federated-learning-lib.examples.zeno.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),\n        nn.Flatten(),\n        nn.Linear(9216, 128),",
        "detail": "federated-learning-lib.examples.zeno.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.model_tf",
        "description": "federated-learning-lib.examples.zeno.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")",
        "detail": "federated-learning-lib.examples.zeno.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.zeno.model_tf",
        "description": "federated-learning-lib.examples.zeno.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    class MyModel(Model):\n        def __init__(self):\n            super(MyModel, self).__init__()\n            self.conv1 = Conv2D(32, 3, activation=\"relu\")\n            self.flatten = Flatten()\n            self.d1 = Dense(128, activation=\"relu\")\n            self.d2 = Dense(10)\n        def call(self, x):\n            x = self.conv1(x)",
        "detail": "federated-learning-lib.examples.zeno.model_tf",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CONNECTION",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "DEFAULT_CONNECTION = \"default\"\nDEFAULT_SERVER = \"default\"\n# Examples helper descriptions\nGENERATE_DATA_DESC = \"generates data for running FL examples\"\nNUM_PARTIES_DESC = \"the number of parties to split the data into\"\nDATASET_DESC = \"which data set to use\"\nPATH_DESC = \"directory to save the data\"\nPER_PARTY = \"the number of data points per party\"\nSTRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SERVER",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "DEFAULT_SERVER = \"default\"\n# Examples helper descriptions\nGENERATE_DATA_DESC = \"generates data for running FL examples\"\nNUM_PARTIES_DESC = \"the number of parties to split the data into\"\nDATASET_DESC = \"which data set to use\"\nPATH_DESC = \"directory to save the data\"\nPER_PARTY = \"the number of data points per party\"\nSTRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "GENERATE_DATA_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "GENERATE_DATA_DESC = \"generates data for running FL examples\"\nNUM_PARTIES_DESC = \"the number of parties to split the data into\"\nDATASET_DESC = \"which data set to use\"\nPATH_DESC = \"directory to save the data\"\nPER_PARTY = \"the number of data points per party\"\nSTRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "NUM_PARTIES_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "NUM_PARTIES_DESC = \"the number of parties to split the data into\"\nDATASET_DESC = \"which data set to use\"\nPATH_DESC = \"directory to save the data\"\nPER_PARTY = \"the number of data points per party\"\nSTRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "DATASET_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "DATASET_DESC = \"which data set to use\"\nPATH_DESC = \"directory to save the data\"\nPER_PARTY = \"the number of data points per party\"\nSTRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "PATH_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "PATH_DESC = \"directory to save the data\"\nPER_PARTY = \"the number of data points per party\"\nSTRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "PER_PARTY",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "PER_PARTY = \"the number of data points per party\"\nSTRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "STRATIFY_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "STRATIFY_DESC = \"proportionally stratify the data according to the source distribution\"\nCONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "CONF_PATH",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "CONF_PATH = \"directory to save the configs\"\nNEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "NEW_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "NEW_DESC = \"create a new directory for this run based on current time instead of overriding\"\nNAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "NAME_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "NAME_DESC = \"the name of the run (default is current time)\"\nPER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "PER_PARTY_ERR",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "PER_PARTY_ERR = \"points per party must either specify one number of a list equal to num_parties\"\nGENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "GENERATE_CONFIG_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "GENERATE_CONFIG_DESC = \"generates aggregator and party configuration files\"\nPATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [\n    \"default\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "PATH_CONFIG_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "PATH_CONFIG_DESC = \"path to load saved config data\"\nFUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [\n    \"default\",\n    \"mnist\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "FUSION_CONFIG_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "FUSION_CONFIG_DESC = \"which fusion example to run\"\nMODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [\n    \"default\",\n    \"mnist\",\n    \"nursery\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "MODEL_CONFIG_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "MODEL_CONFIG_DESC = \"which model to use for fusion example\"\nTASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [\n    \"default\",\n    \"mnist\",\n    \"nursery\",\n    \"adult\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "TASK_NAME_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "TASK_NAME_DESC = \"task name, specified when using PubSub connection\"\nCONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [\n    \"default\",\n    \"mnist\",\n    \"nursery\",\n    \"adult\",\n    \"federated-clustering\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "CONNECTION_TYPE_DESC",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "CONNECTION_TYPE_DESC = \"type of connection to use; supported types are flask and pubsub\"\nCONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [\n    \"default\",\n    \"mnist\",\n    \"nursery\",\n    \"adult\",\n    \"federated-clustering\",\n    \"compas\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "CONTEXT_PATH",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "CONTEXT_PATH = \"context directory to import the generate script from different folders other that examples\"\n# Integration\nFL_DATASETS = [\n    \"default\",\n    \"mnist\",\n    \"nursery\",\n    \"adult\",\n    \"federated-clustering\",\n    \"compas\",\n    \"german\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_DATASETS",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "FL_DATASETS = [\n    \"default\",\n    \"mnist\",\n    \"nursery\",\n    \"adult\",\n    \"federated-clustering\",\n    \"compas\",\n    \"german\",\n    \"higgs\",\n    \"airline\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_EXAMPLES",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "FL_EXAMPLES = [\n    \"iter_avg\",\n    \"iter_avg_openshift\",\n    \"fedavg\",\n    \"coordinate_median\",\n    \"gradient_aggregation\",\n    \"krum\",\n    \"pfnm\",\n    \"zeno\",\n    \"fedprox\",",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_MODELS",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "FL_MODELS = [\"keras\", \"pytorch\", \"tf\", \"sklearn\", \"doc2vec\", \"None\"]\nFL_CONN_TYPES = [\"flask\", \"pubsub\"]\nFL_CONTEXT = {\"openshift\": \"openshift_fl.examples\"}",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_CONN_TYPES",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "FL_CONN_TYPES = [\"flask\", \"pubsub\"]\nFL_CONTEXT = {\"openshift\": \"openshift_fl.examples\"}",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "FL_CONTEXT",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.constants",
        "description": "federated-learning-lib.examples.constants",
        "peekOfCode": "FL_CONTEXT = {\"openshift\": \"openshift_fl.examples\"}",
        "detail": "federated-learning-lib.examples.constants",
        "documentation": {}
    },
    {
        "label": "get_datahandler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.datahandlers",
        "description": "federated-learning-lib.examples.datahandlers",
        "peekOfCode": "def get_datahandler_config(dh_name, folder_data, party_id, is_agg):\n    path = Path(folder_data)\n    staging_dir = \"\"\n    if \"data\" in path.parts:\n        # always holds given how generate_data.py appends \"data\" before generating datasets\n        staging_dir_parts = path.parts[: path.parts.index(\"data\")]\n        for folder in staging_dir_parts:\n            staging_dir = os.path.join(staging_dir, folder)\n    if (\n        dh_name == \"custom_dataset\"",
        "detail": "federated-learning-lib.examples.datahandlers",
        "documentation": {}
    },
    {
        "label": "check_valid_folder_structure",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def check_valid_folder_structure(p):\n    \"\"\"\n    Checks that the folder structure is valid\n    :param p: an argument parser\n    :type p: argparse.ArgumentParser\n    \"\"\"\n    for folder in FL_EXAMPLES:\n        if not os.path.isfile(os.path.join(\"examples\", folder, \"README.md\")) and not os.path.isfile(\n            os.path.join(\"examples\", folder, \"generate_configs.py\")\n        ):",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "setup_parser",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def setup_parser():\n    \"\"\"\n    Sets up the parser for Python script\n    :return: a command line parser\n    :rtype: argparse.ArgumentParser\n    \"\"\"\n    p = argparse.ArgumentParser(description=GENERATE_CONFIG_DESC)\n    p.add_argument(\"--num_parties\", \"-n\", help=NUM_PARTIES_DESC, type=int, required=True)\n    p.add_argument(\"--dataset\", \"-d\", help=\"Dataset code from examples\", type=str, required=True)\n    p.add_argument(\"--data_path\", \"-p\", help=PATH_CONFIG_DESC, required=True)",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_connection_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_connection_config(conn_type, party_id=0, is_party=False, task_name=None):\n    connection = {}\n    if conn_type == \"flask\":\n        tls_config = {\"enable\": False}\n        connection = {\"name\": \"FlaskConnection\", \"path\": \"ibmfl.connection.flask_connection\", \"sync\": False}\n        if is_party:\n            connection[\"info\"] = {\"ip\": \"127.0.0.1\", \"port\": 8085 + party_id}\n        else:\n            connection[\"info\"] = {\"ip\": \"127.0.0.1\", \"port\": 5000}\n        connection[\"info\"][\"tls_config\"] = tls_config",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_aggregator_info",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def get_aggregator_info(conn_type):\n    if conn_type == \"flask\":\n        aggregator = {\"ip\": \"127.0.0.1\", \"port\": 5000}\n    else:\n        aggregator = {}\n    return aggregator\ndef get_privacy():\n    privacy = {\"metrics\": True}\n    return privacy\ndef generate_ph_config(conn_type, is_party=False):",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_privacy",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def get_privacy():\n    privacy = {\"metrics\": True}\n    return privacy\ndef generate_ph_config(conn_type, is_party=False):\n    if is_party:\n        protocol_handler = {\"name\": \"PartyProtocolHandler\", \"path\": \"ibmfl.party.party_protocol_handler\"}\n    else:\n        protocol_handler = {\"name\": \"ProtoHandler\", \"path\": \"ibmfl.aggregator.protohandler.proto_handler\"}\n    if conn_type == \"pubsub\":\n        protocol_handler[\"name\"] += \"RabbitMQ\"",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_ph_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_ph_config(conn_type, is_party=False):\n    if is_party:\n        protocol_handler = {\"name\": \"PartyProtocolHandler\", \"path\": \"ibmfl.party.party_protocol_handler\"}\n    else:\n        protocol_handler = {\"name\": \"ProtoHandler\", \"path\": \"ibmfl.aggregator.protohandler.proto_handler\"}\n    if conn_type == \"pubsub\":\n        protocol_handler[\"name\"] += \"RabbitMQ\"\n    return protocol_handler\ndef generate_fusion_config(module):\n    gen_fusion_config = getattr(module, \"get_fusion_config\")",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_fusion_config(module):\n    gen_fusion_config = getattr(module, \"get_fusion_config\")\n    return gen_fusion_config()\ndef generate_hp_config(model, module, num_parties):\n    gen_hp_config = getattr(module, \"get_hyperparams\")\n    hp = gen_hp_config(model)\n    hp[\"global\"][\"num_parties\"] = num_parties\n    return hp\ndef generate_model_config(module, model, folder_configs, dataset, is_agg=False, party_id=0):\n    get_model_config = getattr(module, \"get_model_config\")",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_hp_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_hp_config(model, module, num_parties):\n    gen_hp_config = getattr(module, \"get_hyperparams\")\n    hp = gen_hp_config(model)\n    hp[\"global\"][\"num_parties\"] = num_parties\n    return hp\ndef generate_model_config(module, model, folder_configs, dataset, is_agg=False, party_id=0):\n    get_model_config = getattr(module, \"get_model_config\")\n    model = get_model_config(folder_configs, dataset, is_agg, party_id, model=model)\n    return model\ndef generate_lt_config(module, folder_configs=None):",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_model_config(module, model, folder_configs, dataset, is_agg=False, party_id=0):\n    get_model_config = getattr(module, \"get_model_config\")\n    model = get_model_config(folder_configs, dataset, is_agg, party_id, model=model)\n    return model\ndef generate_lt_config(module, folder_configs=None):\n    get_local_training_config = getattr(module, \"get_local_training_config\")\n    lt = get_local_training_config(configs_folder=folder_configs)\n    return lt\ndef generate_datahandler_config(module, model, party_id, dataset, folder_data, is_agg=False):\n    get_data_handler_config = getattr(module, \"get_data_handler_config\")",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_lt_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_lt_config(module, folder_configs=None):\n    get_local_training_config = getattr(module, \"get_local_training_config\")\n    lt = get_local_training_config(configs_folder=folder_configs)\n    return lt\ndef generate_datahandler_config(module, model, party_id, dataset, folder_data, is_agg=False):\n    get_data_handler_config = getattr(module, \"get_data_handler_config\")\n    dh = get_data_handler_config(party_id, dataset, folder_data, is_agg, model=model)\n    return dh\ndef generate_agg_config(module, model, num_parties, conn_type, dataset, folder_data, folder_configs, task_name=None):\n    if not os.path.exists(folder_configs):",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_datahandler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_datahandler_config(module, model, party_id, dataset, folder_data, is_agg=False):\n    get_data_handler_config = getattr(module, \"get_data_handler_config\")\n    dh = get_data_handler_config(party_id, dataset, folder_data, is_agg, model=model)\n    return dh\ndef generate_agg_config(module, model, num_parties, conn_type, dataset, folder_data, folder_configs, task_name=None):\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    config_file = os.path.join(folder_configs, \"config_agg.yml\")\n    content = {\n        \"connection\": generate_connection_config(conn_type, task_name=task_name),",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_agg_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_agg_config(module, model, num_parties, conn_type, dataset, folder_data, folder_configs, task_name=None):\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    config_file = os.path.join(folder_configs, \"config_agg.yml\")\n    content = {\n        \"connection\": generate_connection_config(conn_type, task_name=task_name),\n        \"fusion\": generate_fusion_config(module),\n        \"hyperparams\": generate_hp_config(model, module, num_parties),\n        \"protocol_handler\": generate_ph_config(conn_type),\n    }",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_party_config",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_party_config(module, model, num_parties, conn_type, dataset, folder_data, folder_configs, task_name=None):\n    for i in range(num_parties):\n        config_file = os.path.join(folder_configs, \"config_party\" + str(i) + \".yml\")\n        content = {\n            \"connection\": generate_connection_config(conn_type, i, True, task_name=task_name),\n            \"data\": generate_datahandler_config(module, model, i, dataset, folder_data),\n            \"model\": generate_model_config(module, model, folder_configs, dataset, party_id=i),\n            \"protocol_handler\": generate_ph_config(conn_type, True),\n            \"local_training\": generate_lt_config(module, folder_configs=folder_configs),\n            \"aggregator\": get_aggregator_info(conn_type),",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "generate_crypto_keys",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "def generate_crypto_keys(module, config_path):\n    create_crypto_keys = getattr(module, \"create_crypto_keys\", None)\n    if create_crypto_keys is not None:\n        create_crypto_keys(config_path)\nif __name__ == \"__main__\":\n    # Parse command line options\n    parser = setup_parser()\n    args = parser.parse_args()\n    # check_valid_folder_structure(parser)\n    # Collect arguments",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.generate_configs",
        "description": "federated-learning-lib.examples.generate_configs",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nfrom examples.constants import (\n    CONF_PATH,\n    CONNECTION_TYPE_DESC,\n    CONTEXT_PATH,\n    FL_CONN_TYPES,\n    FL_CONTEXT,\n    FL_EXAMPLES,",
        "detail": "federated-learning-lib.examples.generate_configs",
        "documentation": {}
    },
    {
        "label": "setup_parser",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def setup_parser():\n    \"\"\"\n    Sets up the parser for Python script\n    :return: a command line parser\n    :rtype: argparse.ArgumentParser\n    \"\"\"\n    p = argparse.ArgumentParser(description=GENERATE_DATA_DESC)\n    p.add_argument(\"--num_parties\", \"-n\", help=NUM_PARTIES_DESC, type=int, required=True)\n    p.add_argument(\"--dataset\", \"-d\", help=DATASET_DESC, required=True)\n    p.add_argument(\"--data_path\", \"-p\", help=PATH_DESC)",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "print_statistics",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def print_statistics(i, x_test_pi, x_train_pi, nb_labels, y_train_pi):\n    print(\"Party_\", i)\n    print(\"nb_x_train: \", np.shape(x_train_pi), \"nb_x_test: \", np.shape(x_test_pi))\n    for l in range(nb_labels):\n        print(\"* Label \", l, \" samples: \", (y_train_pi == l).sum())\ndef save_nursery_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Nursery party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_nursery_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_nursery_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Nursery party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_adult_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_adult_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Adult party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_german_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_german_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves German Credit Scorning party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_compas_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_compas_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Compas party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool``\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_cifar10_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_cifar10_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Cifar10 party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_mnist_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_mnist_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves MNIST party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_higgs_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_higgs_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Higgs Boson party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_airline_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_airline_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Airline Delay party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_diabetes_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_diabetes_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Diabetes party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_binovf_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_binovf_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Binary Overfit party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_multovf_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_multovf_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves Multiclass Overfit party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_linovf_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_linovf_party_data(nb_dp_per_party, party_folder, dataset_folder):\n    \"\"\"\n    Saves Linear Overfit party data (For Regression)\n    Data stratification is not supported in this function.\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset\n    :type dataset_folder: `str`",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_femnist_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_femnist_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder):\n    \"\"\"\n    Saves LEAF-FEMNIST party data\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`, if any value in list is -1, use femnist's default distribution\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :return: None",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_federated_clustering_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_federated_clustering_data(nb_dp_per_party, party_folder):\n    \"\"\"\n    Saves simulated federated clustering dataset for unsupervised federated\n    learning setting\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    \"\"\"\n    num_clients = len(nb_dp_per_party)",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_party_data(nb_dp_per_party, should_stratify, party_folder, dataset_folder, dataset):\n    \"\"\"\n    Loads a generate dataset saved as in csv format and creates parties local datasets\n    as specified.\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param should_stratify: True if data should be assigned proportional to source class distributions\n    :type should_stratify: `bool`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "save_wikipedia_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "def save_wikipedia_party_data(nb_dp_per_party, party_folder, dataset_folder):\n    \"\"\"\n    Saves Wikipedia party data for Doc2Vec\n    :param nb_dp_per_party: the number of data points each party should have\n    :type nb_dp_per_party: `list[int]`\n    :param party_folder: folder to save party data\n    :type party_folder: `str`\n    :param dataset_folder: folder to save dataset\n    :type dataset_folder: `str`\n    \"\"\"",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.examples.generate_data",
        "description": "federated-learning-lib.examples.generate_data",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nfrom ibmfl.util.datasets import (\n    load_adult,\n    load_airline,\n    load_binovf,\n    load_cifar10,\n    load_compas,\n    load_diabetes,",
        "detail": "federated-learning-lib.examples.generate_data",
        "documentation": {}
    },
    {
        "label": "args_parse",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pubsub_deregister",
        "description": "federated-learning-lib.examples.pubsub_deregister",
        "peekOfCode": "def args_parse():\n    parser = argparse.ArgumentParser(description=\"RabbitMQ register\")\n    parser.add_argument(\"--credentials\", required=True)\n    cmdline = parser.parse_args()\n    return cmdline\ndef main():\n    cmdline = args_parse()\n    ffl.Factory.register(\"cloud\", fflapi.Context, fflapi.User, fflapi.Aggregator, fflapi.Participant)\n    context = ffl.Factory.context(\"cloud\", cmdline.credentials)\n    print(f\"Remove user: {context.user()} ...\")",
        "detail": "federated-learning-lib.examples.pubsub_deregister",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pubsub_deregister",
        "description": "federated-learning-lib.examples.pubsub_deregister",
        "peekOfCode": "def main():\n    cmdline = args_parse()\n    ffl.Factory.register(\"cloud\", fflapi.Context, fflapi.User, fflapi.Aggregator, fflapi.Participant)\n    context = ffl.Factory.context(\"cloud\", cmdline.credentials)\n    print(f\"Remove user: {context.user()} ...\")\n    user = ffl.Factory.user(context)\n    with user:\n        user.deregister()\n    print(f\"User successfully removed: {context.user()}\")\nif __name__ == \"__main__\":",
        "detail": "federated-learning-lib.examples.pubsub_deregister",
        "documentation": {}
    },
    {
        "label": "args_parse",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pubsub_register",
        "description": "federated-learning-lib.examples.pubsub_register",
        "peekOfCode": "def args_parse():\n    parser = argparse.ArgumentParser(description=\"RabbitMQ register\")\n    parser.add_argument(\"--credentials\", required=True)\n    parser.add_argument(\"--user\", required=True)\n    parser.add_argument(\"--password\", required=True)\n    parser.add_argument(\"--org\", required=False, default=\"IBM\", help=\"User organisation\")\n    cmdline = parser.parse_args()\n    return cmdline\ndef main():\n    cmdline = args_parse()",
        "detail": "federated-learning-lib.examples.pubsub_register",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pubsub_register",
        "description": "federated-learning-lib.examples.pubsub_register",
        "peekOfCode": "def main():\n    cmdline = args_parse()\n    print(f\"Creating user: {cmdline.user} ...\")\n    creds = fflapi.create_user(cmdline.user, cmdline.password, cmdline.org, cmdline.credentials)\n    print(json.dumps(creds[\"connection\"], indent=4))\nif __name__ == \"__main__\":\n    main()",
        "detail": "federated-learning-lib.examples.pubsub_register",
        "documentation": {}
    },
    {
        "label": "args_parse",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pubsub_task",
        "description": "federated-learning-lib.examples.pubsub_task",
        "peekOfCode": "def args_parse():\n    parser = argparse.ArgumentParser(description=\"RabbitMQ connection\")\n    parser.add_argument(\"--credentials\", required=True)\n    parser.add_argument(\"--task_name\", required=True)\n    parser.add_argument(\"--action\", nargs=\"?\", choices=(\"create\", \"list\", \"lineage\"), default=\"create\")\n    cmdline = parser.parse_args()\n    return cmdline\ndef main():\n    try:\n        cmdline = args_parse()",
        "detail": "federated-learning-lib.examples.pubsub_task",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pubsub_task",
        "description": "federated-learning-lib.examples.pubsub_task",
        "peekOfCode": "def main():\n    try:\n        cmdline = args_parse()\n        ffl.Factory.register(\"cloud\", fflapi.Context, fflapi.User, fflapi.Aggregator, fflapi.Participant)\n        context = ffl.Factory.context(\"cloud\", cmdline.credentials)\n        user = ffl.Factory.user(context)\n        with user:\n            if cmdline.action == \"create\":\n                result = user.create_task(cmdline.task_name, ffl.Topology.star, {})\n                print(result)",
        "detail": "federated-learning-lib.examples.pubsub_task",
        "documentation": {}
    },
    {
        "label": "print_lineage",
        "kind": 2,
        "importPath": "federated-learning-lib.examples.pubsub_task",
        "description": "federated-learning-lib.examples.pubsub_task",
        "peekOfCode": "def print_lineage(result: dict):\n    training_round = 0\n    print(f\"{'Round':5} {'Date':30} {'Origin':20} {'Id':11} {'Hash':11} {'Value Estimate':20} {'Reward':10}\")\n    for line in result:\n        if \"genre\" in line:\n            if line[\"genre\"] == \"INTERIM\":\n                training_round += 1\n                print(\n                    f\"{training_round:^5d} {line['added']:30} {'AGGREGATOR':20} \"\n                    + f\"...{str(line['external_id'][-7:]):8} ...{str(line['xsum'][-7:]):8}\"",
        "detail": "federated-learning-lib.examples.pubsub_task",
        "documentation": {}
    },
    {
        "label": "json_to_table",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def json_to_table(json_data):\n    \"\"\"\n    Convert metrics json data into a DataFrame for easier processing\n    :param json_data: the raw read-in metrics file\n    :type l: `dict`\n    :return: reorganized subset of the data as DataFrame, based on some conventions\n    :rtype: `pandas.DataFrame`\n    \"\"\"\n    # TODO: sort the keys in this order\n    table_col_order = [",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "parse_party_data",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def parse_party_data(file_path, n_trials, n_parties):\n    \"\"\"\n    Read in all data for an experiment into a single dictionary\n    :param file_path: path to the metrics file\n    :type file_path: `str`\n    :param n_trials: the number of trials in the experiment\n    :type n_trials: `int`\n    :param n_parties: the number of parties for the experiment\n    :type n_parties: `int`\n    :return: Dictionary with one key per metric, whose values are lists with one element per party, \\",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "offset_method_first",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def offset_method_first(l):\n    \"\"\"\n    Example of an offset method that can be passed to the various offset_vals function below; \\\n    it offsets all values based on the first value in the list\n    :param l: the values to offset\n    :type l: list\n    :return: a new list (NOT a reference to the input list) with the new elements\n    :rtype: list\n    \"\"\"\n    ret = np.copy(l)",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "offset_method_delta",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def offset_method_delta(l):\n    \"\"\"\n    Example of an offset method that can be passed to the various offset_* functions below; \\\n    it offsets all values based on the previous value in the list\n    :param l: the values to offset\n    :type l: list\n    :return: a new list (NOT a reference to the input list) with the new elements\n    :rtype: list\n    \"\"\"\n    ret = np.copy(l)",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "offset_vals",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def offset_vals(metrics_dict, offset_keys, offset_methods_dict):\n    \"\"\"\n    Compute the offset of the values for a set of metrics using the strategies specified\n    :param metrics_dict: data for an experiment (output of parse_party_data)\n    :type metrics_dict: `dict[list[list[np.array]]]`\n    :param offset_keys: the keys in the metrics_dict to apply the offset to\n    :type offset_keys: `list[str]`\n    :param offset_methods_dict: a label-indexed dictionary of the strategies to use\n    :type offset_methods_dict: `dict[str,callable]`\n    :return: A reference to the input metrics dictionary",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "offset_vals_cycle",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def offset_vals_cycle(metrics_dict, offset_keys):\n    \"\"\"\n    Compute the offset of the values for a set of metrics using the \"delta\" strategy; \\\n    unlike the above function, the keys listed are used in sequence; instead of the offset \\\n    being computed per-key, the offset is assuming that all values are taken per round \\\n    in the order they appear in offset_keys\n    :param metrics_dict: data for an experiment (output of parse_party_data)\n    :type metrics_dict: `dict[list[list[np.array]]]`\n    :param offset_keys: the keys in the metrics_dict to apply the offset to in sequence\n    :type offset_keys: `list[str]`",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "group_by_iter",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def group_by_iter(metrics_dict):\n    \"\"\"\n    Restructure our metrics dictionary to have the last list store all the trials' values \\\n    for a given iteration, instead of all the iterations' values for a given trial.\n    :param metrics_dict: data for an experiment (output of parse_party_data)\n    :type metrics_dict: `dict[list[list[np.array]]]`\n    :return: A new, reorganized dict\n    :rtype: `dict[list[list[np.array]]]`\n    \"\"\"\n    # TODO: more pythonic, pandas-thonic, or numpy-thonic way of doing this?",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "aggregate_over_trials",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def aggregate_over_trials(metrics_gbi, agg_methods):\n    \"\"\"\n    Aggregate the values for all the trials at a given iteration\n    Some examples of agg_methods that could be useful: \\\n      - statistics.mean \\\n      - statistics.median \\\n      - max \\\n      - lambda x: 2.086 * statistics.stdev(x)/math.sqrt(len(x)) if len(x) > 1 else 0 \\\n      - lambda x: x[0] \\\n      - random.choice",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "plot_metric_vs_x",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def plot_metric_vs_x(metrics_dict, x_vals, metric_key, plot_title, output_filepath=None):\n    \"\"\"\n    A helper function for plotting metrics vs various x variables\n    :param metrics_dict: data for an experiment \\\n    (output of aggregate_over_trials with 'mean' and 'stderr' functions applied during aggregation)\n    :type metrics_dict: `dict[str,list[dict[str,list]]]`\n    :param x_vals: one metric's data for use as x variable in plot\n    :type x_vals: `list[list[numeric]]`\n    :param metric_key: key in metrics_dict use as y variable in plot\n    :type metric_key: `str`",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "plot_metric_vs_time",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def plot_metric_vs_time(metrics_dict, metadata_dict, metric_key, plot_title, output_filepath=None):\n    \"\"\"\n    Plot the given metric vs time, based on a common timestamp collected as part of metrics\n    :param metrics_dict: data for an experiment \\\n    (output of aggregate_over_trials with 'mean' and 'stderr' functions applied during aggregation)\n    :type metrics_dict: `dict[str,list[dict[str,list]]]`\n    :param metadata_dict: 'metadata' key from the output of parse_party_data\n    :type metadata_dict: `dict`\n    :param metric_key: key in metrics_dict use as y variable in plot\n    :type metric_key: `str`",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "plot_metric_vs_round",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def plot_metric_vs_round(metrics_dict, metadata_dict, metric_key, plot_title, output_filepath=None):\n    \"\"\"\n    Plot the given metric vs round no, which is collected as part of the metrics' metadata\n    :param metrics_dict: data for an experiment \\\n    (output of aggregate_over_trials with 'mean' and 'stderr' functions applied during aggregation)\n    :type metrics_dict: `dict[str,list[dict[str,list]]]`\n    :param metadata_dict: 'metadata' key from the output of parse_party_data\n    :type metadata_dict: `dict`\n    :param metric_key: key in metrics_dict use as y variable in plot\n    :type metric_key: `str`",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "gen_reward_vs_time_plots2",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def gen_reward_vs_time_plots2(dat, reward_keys, x_axis_val=\"round\", x_axis_key=None):\n    \"\"\"\n    Plot the given metric vs round no, which is collected as part of the metrics' metadata\n    :param dat: metrics data as produced by runner.get_experiment_output \\\n    (the dict has one element, 'metadata', which is a dict as well, contrary to the below type)\n    :type dat: `dict[list[list[np.array]]]`\n    :param reward_keys: keys to plot on y axis\n    :type reward_keys: `list[str]`\n    :param x_axis_val: we can specify a label here to select our x-axis value; \\\n    'round' is treated uniquely to use the round number, any other string requires x_axis_key",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "gen_reward_vs_time_plots",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def gen_reward_vs_time_plots(metrics_file_tmpl, n_trials, n_parties, reward_keys, x_axis_val=\"round\", x_axis_key=None):\n    \"\"\"\n    Plot the given metric vs round no, which is collected as part of the metrics' metadata\n    :param metrics_file_tmpl: a path to the metrics files for an experiment, \\\n    containing a ${trial} and ${id} template parameter\n    :type metrics_file_tmpl: `str`\n    :param n_trials: number of trials in the experiment to use for this plot\n    :type n_trials: `int`\n    :param n_parties: number of parties in the experiment to use for this plot \n    :type n_parties: `int`",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "gen_timing_plots",
        "kind": 2,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "def gen_timing_plots(metrics_file_tmpl, n_trials, n_parties, offset_cycle_keys):\n    \"\"\"\n    Plot the timing deltas for the code regions delinteated by a list of keys as a stacked bar\n    :param metrics_file_tmpl: a path to the metrics files for an experiment, \\\n    containing a ${trial} and ${id} template parameter\n    :type metrics_file_tmpl: `str`\n    :param n_trials: number of trials in the experiment to use for this plot\n    :type n_trials: `int`\n    :param n_parties: number of parties in the experiment to use for this plot \n    :type n_parties: `int`",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "pp",
        "kind": 5,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "peekOfCode": "pp = pprint.PrettyPrinter(indent=4)\nimport re\nimport statistics\nimport sys\nfrom string import Template\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn\")\nplt.rcParams.update({\"lines.markeredgewidth\": 1})\nimport numpy as np\nnp.set_printoptions(precision=2, linewidth=100)",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.postprocess",
        "documentation": {}
    },
    {
        "label": "Runner",
        "kind": 6,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run",
        "peekOfCode": "class Runner:\n    \"\"\"\n    The runner class contains all the shared information about the ongoing runs, and has the capability of\n    organizing the configuration of experiments where IBMFL runs are triggered in parameterized\n    ways.\n    \"\"\"\n    __cmds_agg = \"START\\nTRAIN\\nEVAL\\nSTOP\"\n    __cmds_party = \"START\\nREGISTER\"\n    def __init__(self):\n        \"\"\"",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nimport experiment_manager.ibmfl_cli_automator.postprocess as ibmfl_postproc\n# USAGE:\n# ./ibmfl_cli_automator/run_paramiko.py <runner_config_dir>\n#\n# ASSMUMPTIONS:\n# - automator config is named config_runner.yml\n# - config file templates are named config_agg_tmpl.yml, config_party_tmpl.yml",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_agg",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_agg",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nfrom ibmfl.aggregator.aggregator import Aggregator\nfrom ibmfl.aggregator.states import States\nfrom ibmfl.util.config import get_config_from_file\nlogger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_agg",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_agg",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_agg",
        "peekOfCode": "logger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out\n    of our Aggregator class which could be interactive\n    \"\"\"\n    if len(sys.argv) < 2 or len(sys.argv) > 2:\n        logging.error(\"Please provide yaml configuration\")\n    server_process = None\n    config_file = sys.argv[1]",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_agg",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_party",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_party",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nfrom ibmfl.party.party import Party\nfrom ibmfl.party.status_type import StatusType\nlogger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out\n    of our Party class which could be interactive",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_party",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_party",
        "description": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_party",
        "peekOfCode": "logger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out\n    of our Party class which could be interactive\n    \"\"\"\n    if len(sys.argv) < 2 or len(sys.argv) > 2:\n        logging.error(\"Please provide yaml configuration\")\n    config_file = sys.argv[1]\n    p = Party(config_file=config_file)",
        "detail": "federated-learning-lib.experiment_manager.ibmfl_cli_automator.run_party",
        "documentation": {}
    },
    {
        "label": "ConfigManager",
        "kind": 6,
        "importPath": "federated-learning-lib.experiment_manager.config_manager",
        "description": "federated-learning-lib.experiment_manager.config_manager",
        "peekOfCode": "class ConfigManager:\n    \"\"\"\n    The ConfigManager class contains all non-UI logic from the dashboard, necessary to populate objects necessary\n    for invoking the runner module.\n    \"\"\"\n    def __init__(self):\n        self.file_for_supported_combinations = \"supported_models.csv\"\n        self.file_for_hyperparams = \"hyperparams_to_models_map.json\"\n        # dict to store choices made via Notebook UI\n        self.nb_config = {\"split\": {}}",
        "detail": "federated-learning-lib.experiment_manager.config_manager",
        "documentation": {}
    },
    {
        "label": "DashboardUI",
        "kind": 6,
        "importPath": "federated-learning-lib.experiment_manager.dashboard_ui",
        "description": "federated-learning-lib.experiment_manager.dashboard_ui",
        "peekOfCode": "class DashboardUI:\n    \"\"\"\n    The DashboardUI class contains all widgets required in the dashboard, as well as their event handler methods.\n    \"\"\"\n    def __init__(self):\n        self.mgr = config_manager.ConfigManager()\n        self.exp_runner = ibmfl_runner.Runner()\n        self.params_widgets = []\n        self.hyperparams_dict = {}\n    def generate_model_dataset_fusion_ui(self):",
        "detail": "federated-learning-lib.experiment_manager.dashboard_ui",
        "documentation": {}
    },
    {
        "label": "create_crypto_keys",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "def create_crypto_keys(config_path):\n    global crypto_keys_dir\n    if config_path is not None:\n        crypto_keys_dir = os.path.join(config_path, \"keys\")\n    if not os.path.exists(crypto_keys_dir):\n        os.makedirs(crypto_keys_dir)\n    # Path for public key context file\n    ctx_file = os.path.join(crypto_keys_dir, \"fhe.context\")\n    # Path for secret key context file\n    key_file = os.path.join(crypto_keys_dir, \"fhe.key\")",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\n        \"name\": \"CryptoIterAvgFusionHandler\",\n        \"path\": \"ibmfl.aggregator.fusion.crypto_iter_avg_fusion_handler\",\n        \"info\": {\"crypto\": get_crypto_config(isParty=False)},\n    }\n    return fusion\ndef get_local_training_config(configs_folder):\n    local_training_handler = {\n        \"name\": \"CryptoLocalTrainingHandler\",",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder):\n    local_training_handler = {\n        \"name\": \"CryptoLocalTrainingHandler\",\n        \"path\": \"ibmfl.party.training.crypto_local_training_handler\",\n        \"info\": {\"crypto\": get_crypto_config(isParty=True)},\n    }\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\n        \"global\": {",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\n        \"global\": {\n            \"rounds\": 3,\n        }\n    }\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"tf\", \"pytorch\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)\ndef get_crypto_config(isParty):\n    global crypto_keys_dir",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_crypto_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_crypto_config(isParty):\n    global crypto_keys_dir\n    # Path for public key context file\n    ctx_file = os.path.join(crypto_keys_dir, \"fhe.context\")\n    # Path for secret key context file\n    key_file = os.path.join(crypto_keys_dir, \"fhe.key\")\n    if not isParty:\n        crypto = {\n            \"name\": \"CryptoFHE\",\n            \"path\": \"ibmfl.crypto.helayer.fhe\",",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "crypto_keys_dir",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "peekOfCode": "crypto_keys_dir = \"examples/keys\"\ndef create_crypto_keys(config_path):\n    global crypto_keys_dir\n    if config_path is not None:\n        crypto_keys_dir = os.path.join(config_path, \"keys\")\n    if not os.path.exists(crypto_keys_dir):\n        os.makedirs(crypto_keys_dir)\n    # Path for public key context file\n    ctx_file = os.path.join(crypto_keys_dir, \"fhe.context\")\n    # Path for secret key context file",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)\n    elif dataset == \"femnist\":\n        return get_femnist_model_config(folder_configs)\n    elif dataset == \"custom_dataset\":",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_mnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "peekOfCode": "def get_mnist_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation=\"relu\"))",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_cifar10_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "peekOfCode": "def get_cifar10_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 32, 32\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (3, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 3)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_femnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "peekOfCode": "def get_femnist_model_config(folder_configs):\n    num_classes = 62\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(5, 5), activation=\"relu\", padding=\"same\", input_shape=input_shape))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=2))",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_pytorch",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\n        \"training\": {\"epochs\": 3, \"lr\": 1},\n    }\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_pytorch",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_sklearn",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_sklearn",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"max_iter\": 2}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_sklearn",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_sklearn",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = SGDClassifier(loss=\"log\", penalty=\"l2\")\n    if dataset == \"adult\":\n        model.classes_ = np.array([0, 1])\n    elif dataset == \"mnist\":\n        model.classes_ = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_sklearn",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "peekOfCode": "def get_hyperparams():\n    local_hyperparams = {\"training\": {\"epochs\": 2}}\n    return local_hyperparams\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    model = define_mnist_model_via_tf_keras()\n    model.save(folder_configs)",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if not os.path.exists(folder_configs):\n        os.makedirs(folder_configs)\n    model = define_mnist_model_via_tf_keras()\n    model.save(folder_configs)\n    spec = {\"model_name\": \"tf-cnn\", \"model_definition\": folder_configs}\n    return {\"name\": \"TensorFlowFLModel\", \"path\": \"ibmfl.model.tensorflow_fl_model\", \"spec\": spec}\ndef define_mnist_model_via_tf_keras():",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "documentation": {}
    },
    {
        "label": "define_mnist_model_via_tf_keras",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "description": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "peekOfCode": "def define_mnist_model_via_tf_keras():\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    class MnistCnnModel(tf.keras.Model):\n        def __init__(self):\n            super(MnistCnnModel, self).__init__()\n            self.conv1 = tf.keras.layers.Conv2D(32, 3, activation=\"relu\")\n            self.flatten = tf.keras.layers.Flatten()\n            self.d1 = tf.keras.layers.Dense(128, activation=\"relu\")\n            self.d2 = tf.keras.layers.Dense(num_classes)",
        "detail": "federated-learning-lib.openshift_fl.examples.fhe_iter_avg_openshift.model_tf",
        "documentation": {}
    },
    {
        "label": "get_fusion_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_fusion_config():\n    fusion = {\"name\": \"IterAvgFusionHandler\", \"path\": \"ibmfl.aggregator.fusion.iter_avg_fusion_handler\"}\n    return fusion\ndef get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_local_training_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_local_training_config(configs_folder=None):\n    local_training_handler = {\"name\": \"LocalTrainingHandler\", \"path\": \"ibmfl.party.training.local_training_handler\"}\n    return local_training_handler\ndef get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_hyperparams(model):\n    hyperparams = {\"global\": {\"rounds\": 3, \"termination_accuracy\": 0.9, \"max_timeout\": 60}}\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    local_params_method = getattr(model_module, \"get_hyperparams\")\n    local_params = local_params_method()\n    hyperparams[\"local\"] = local_params\n    return hyperparams\ndef get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_data_handler_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_data_handler_config(party_id, dataset, folder_data, is_agg=False, model=\"keras\"):\n    SUPPORTED_DATASETS = [\"mnist\", \"adult\", \"cifar10\", \"femnist\", \"custom_dataset\"]\n    if dataset in SUPPORTED_DATASETS:\n        if model not in \"keras\":\n            dataset = dataset + \"_\" + model\n        data = datahandlers.get_datahandler_config(dataset, folder_data, party_id, is_agg)\n    else:\n        raise Exception(\"The dataset {} is a wrong combination for fusion/model\".format(dataset))\n    return data\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0, model=\"keras\"):\n    SUPPORTED_MODELS = [\"keras\", \"pytorch\", \"tf\", \"sklearn\"]\n    if model not in SUPPORTED_MODELS:\n        raise Exception(\"Invalid model config for this fusion algorithm\")\n    current_module = globals().get(\"__package__\")\n    model_module = import_module(\"{}.model_{}\".format(current_module, model))\n    method = getattr(model_module, \"get_model_config\")\n    return method(folder_configs, dataset, is_agg=is_agg, party_id=0)",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.generate_configs",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3}, \"optimizer\": {\"lr\": 0.01}}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    if dataset == \"mnist\":\n        return get_mnist_model_config(folder_configs)\n    elif dataset == \"cifar10\":\n        return get_cifar10_model_config(folder_configs)\n    elif dataset == \"femnist\":\n        return get_femnist_model_config(folder_configs)\n    else:",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_mnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "peekOfCode": "def get_mnist_model_config(folder_configs):\n    num_classes = 10\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=input_shape))\n    model.add(Conv2D(64, (3, 3), activation=\"relu\"))",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_cifar10_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "peekOfCode": "def get_cifar10_model_config(folder_configs):\n    if is_agg:\n        return None\n    num_classes = 10\n    img_rows, img_cols = 32, 32\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (3, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 3)\n    model = Sequential()",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_femnist_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "peekOfCode": "def get_femnist_model_config(folder_configs):\n    if is_agg:\n        return None\n    num_classes = 62\n    img_rows, img_cols = 28, 28\n    if K.image_data_format() == \"channels_first\":\n        input_shape = (1, img_rows, img_cols)\n    else:\n        input_shape = (img_rows, img_cols, 1)\n    model = Sequential()",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_keras",
        "documentation": {}
    },
    {
        "label": "get_hyperparams",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_pytorch",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_pytorch",
        "peekOfCode": "def get_hyperparams():\n    local_params = {\"training\": {\"epochs\": 3, \"lr\": 1}, \"optimizer\": \"optim.Adadelta\"}\n    return local_params\ndef get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_pytorch",
        "documentation": {}
    },
    {
        "label": "get_model_config",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_pytorch",
        "description": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_pytorch",
        "peekOfCode": "def get_model_config(folder_configs, dataset, is_agg=False, party_id=0):\n    if is_agg:\n        return None\n    model = nn.Sequential(\n        nn.Conv2d(1, 32, 3, 1),\n        nn.ReLU(),\n        nn.Conv2d(32, 64, 3, 1),\n        nn.ReLU(),\n        nn.MaxPool2d(2, 2),\n        nn.Dropout2d(p=0.25),",
        "detail": "federated-learning-lib.openshift_fl.examples.iter_avg_openshift.model_pytorch",
        "documentation": {}
    },
    {
        "label": "stage_trial_files",
        "kind": 2,
        "importPath": "federated-learning-lib.openshift_fl.data_copy_util",
        "description": "federated-learning-lib.openshift_fl.data_copy_util",
        "peekOfCode": "def stage_trial_files(\n    generated_files_dir, local_trial_dir, machine_trial_dir, config_agg_dict=None, config_party_dicts=None\n):\n    \"\"\"\n    - Copy all files placed into generated_files_dir by the IBMFL generate_* scripts and place \\\n      them all flat into local_trial_dir. \\\n    - Update the paths inside the configs using machine_trial_dir, assuming that they will be \\\n      copied there before the agg and party processes are started. \\\n    - Return a dictionary with the keys corresponding to the procs ('agg', 'partyX') whose \\\n      values are lists of all the files needed for each of those procs.",
        "detail": "federated-learning-lib.openshift_fl.data_copy_util",
        "documentation": {}
    },
    {
        "label": "ExperimentRunner",
        "kind": 6,
        "importPath": "federated-learning-lib.openshift_fl.experiment_runner",
        "description": "federated-learning-lib.openshift_fl.experiment_runner",
        "peekOfCode": "class ExperimentRunner:\n    \"\"\"\n    ExperimentRunner runs the federated training experiments \\\n    - Cordinates execution of FL commands between aggregator and party pods \\\n    - Executes multiple trials of experiment \\\n    - Captures the experiment trace from aggregator and party pods \\\n    \"\"\"\n    def __init__(self, default, experiment, fl_spawner_dict):\n        self.default = default\n        self.experiment = experiment",
        "detail": "federated-learning-lib.openshift_fl.experiment_runner",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.experiment_runner",
        "description": "federated-learning-lib.openshift_fl.experiment_runner",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ExperimentRunner:\n    \"\"\"\n    ExperimentRunner runs the federated training experiments \\\n    - Cordinates execution of FL commands between aggregator and party pods \\\n    - Executes multiple trials of experiment \\\n    - Captures the experiment trace from aggregator and party pods \\\n    \"\"\"\n    def __init__(self, default, experiment, fl_spawner_dict):\n        self.default = default",
        "detail": "federated-learning-lib.openshift_fl.experiment_runner",
        "documentation": {}
    },
    {
        "label": "FLSpawner",
        "kind": 6,
        "importPath": "federated-learning-lib.openshift_fl.fl_spawner",
        "description": "federated-learning-lib.openshift_fl.fl_spawner",
        "peekOfCode": "class FLSpawner:\n    \"\"\"\n    FLSpawner creates and manage the FL aggregator and party pods in a kubernetes cluster \\\n    using the kubernetes client apis.\n    \"\"\"\n    def __init__(self, cluster, namespace, config_file=None, context=None, data=None):\n        \"\"\"\n        Instantiate the FLSpawner based on the cluster info and kube config file , \\\n        kube config file will be generated by kubernetes client when you setup the \\\n        credentials to access the cluster",
        "detail": "federated-learning-lib.openshift_fl.fl_spawner",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.fl_spawner",
        "description": "federated-learning-lib.openshift_fl.fl_spawner",
        "peekOfCode": "logger = logging.getLogger(__name__)\nimport subprocess\nimport tarfile\nfrom tempfile import TemporaryFile\nclass FLSpawner:\n    \"\"\"\n    FLSpawner creates and manage the FL aggregator and party pods in a kubernetes cluster \\\n    using the kubernetes client apis.\n    \"\"\"\n    def __init__(self, cluster, namespace, config_file=None, context=None, data=None):",
        "detail": "federated-learning-lib.openshift_fl.fl_spawner",
        "documentation": {}
    },
    {
        "label": "Orchestrator",
        "kind": 6,
        "importPath": "federated-learning-lib.openshift_fl.orchestrator",
        "description": "federated-learning-lib.openshift_fl.orchestrator",
        "peekOfCode": "class Orchestrator:\n    \"\"\"\n    Orchestrator runs FL experiments in OpenShift clusters\n    \"\"\"\n    def __init__(self, config_global):\n        \"\"\"\n        Instantiate the orchestrator based on the config file provided \\\n        :param config_global: path to yml file that contains the cluster \\\n        and experiment info\n        \"\"\"",
        "detail": "federated-learning-lib.openshift_fl.orchestrator",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.orchestrator",
        "description": "federated-learning-lib.openshift_fl.orchestrator",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nfrom ibmfl.util.config import configure_logging_from_file\nlogger = logging.getLogger(__name__)\nclass Orchestrator:\n    \"\"\"\n    Orchestrator runs FL experiments in OpenShift clusters\n    \"\"\"\n    def __init__(self, config_global):",
        "detail": "federated-learning-lib.openshift_fl.orchestrator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.orchestrator",
        "description": "federated-learning-lib.openshift_fl.orchestrator",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Orchestrator:\n    \"\"\"\n    Orchestrator runs FL experiments in OpenShift clusters\n    \"\"\"\n    def __init__(self, config_global):\n        \"\"\"\n        Instantiate the orchestrator based on the config file provided \\\n        :param config_global: path to yml file that contains the cluster \\\n        and experiment info",
        "detail": "federated-learning-lib.openshift_fl.orchestrator",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.run_agg",
        "description": "federated-learning-lib.openshift_fl.run_agg",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nlogger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out \\\n    of our Aggregator class which could be interactive\n    \"\"\"\n    if len(sys.argv) < 2 or len(sys.argv) > 2:",
        "detail": "federated-learning-lib.openshift_fl.run_agg",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.run_agg",
        "description": "federated-learning-lib.openshift_fl.run_agg",
        "peekOfCode": "logger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out \\\n    of our Aggregator class which could be interactive\n    \"\"\"\n    if len(sys.argv) < 2 or len(sys.argv) > 2:\n        logger.error(\"Please provide yaml configuration\")\n    server_process = None\n    config_file = sys.argv[1]",
        "detail": "federated-learning-lib.openshift_fl.run_agg",
        "documentation": {}
    },
    {
        "label": "fl_path",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.run_party",
        "description": "federated-learning-lib.openshift_fl.run_party",
        "peekOfCode": "fl_path = os.path.abspath(\".\")\nif fl_path not in sys.path:\n    sys.path.append(fl_path)\nlogger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out \\\n    of our Aggregator class which could be interactive\n    \"\"\"\n    if len(sys.argv) < 2 or len(sys.argv) > 2:",
        "detail": "federated-learning-lib.openshift_fl.run_party",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "federated-learning-lib.openshift_fl.run_party",
        "description": "federated-learning-lib.openshift_fl.run_party",
        "peekOfCode": "logger = logging.getLogger(__name__)\nif __name__ == \"__main__\":\n    \"\"\"\n    Main function can be used to create an application out \\\n    of our Aggregator class which could be interactive\n    \"\"\"\n    if len(sys.argv) < 2 or len(sys.argv) > 2:\n        logger.error(\"Please provide yaml configuration\")\n    config_file = sys.argv[1]\n    if not os.path.isfile(config_file):",
        "detail": "federated-learning-lib.openshift_fl.run_party",
        "documentation": {}
    }
]